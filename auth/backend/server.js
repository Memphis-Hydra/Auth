import express from "express";
import bcrypt from "bcrypt";
import { getUser } from "./src/database.js";
import { body, validationResult } from "express-validator";
import jwt from "jsonwebtoken";
import dotenv from "dotenv";
import cookieParser from "cookie-parser";
import { verifyToken } from "./src/middleware/index.js";
import { upload } from "./src/multer.js";

dotenv.config();

const app = express();
app.use((req, res, next) => {
  res.setHeader("Access-Control-Allow-Origin", "http://localhost:5173"); // Replace with the actual origin of your front end
  res.setHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");
  res.setHeader("Access-Control-Allow-Credentials", "true");
  next();
});

app.use(cookieParser()); // Use the cookie-parser middleware to parse cookies

// Middleware to parse JSON in the request body.
app.use(express.json());

// Login.
app.post(
  "/login",
  [
    // Validation middleware to check "username" and "password" in the request body.
    body("username").notEmpty().isString(),
    body("password").notEmpty().isString(),
  ],
  async (req, res) => {
    try {
      // Check for validation errors generated by the middleware.
      const errors = validationResult(req);

      if (!errors.isEmpty()) {
        // If there are validation errors, respond with a 400 Bad Request status and errors.
        return res.status(400).json({ errors: errors.array() });
      }

      // Extract "username" and "password" from the request body.
      const { username, password } = req.body;

      // Retrieve the user from the database by their username.
      const user = await getUser(username);

      if (!user || user.length === 0) {
        // If the user is not found, respond with a 401 Unauthorized status.
        return res.status(401).send("User not found.");
      }

      // Compare the provided password with the hashed password in the database.
      const result = await bcrypt.compare(password, user[0].password);

      if (result) {
        const expirationInSeconds = 60 * 60 * 24 * 30; // 30 days * 24 hours * 60 minutes * 60 seconds

        const payload = {
          username: user[0].username,
        };
        // Generate the JWT
        const token = jwt.sign(payload, process.env.ACCES_TOKEN_SECRET, {
          expiresIn: expirationInSeconds,
        });

        res.cookie("accessToken", token);

        // Redirect to the "/upload" page if the login is successful and the user exists in the database.
        res.send("success");
      } else {
        // If the passwords don't match, respond with "false" to indicate an unsuccessful login.
        res.send("false");
      }
    } catch (err) {
      // Handle any unexpected errors, log them, and respond with a 500 Internal Server Error.
      console.error(err);
      res.status(500).send("Internal Server Error");
    }
  }
);

app.post("/upload", verifyToken, upload.single('file'), (req, res) => {
  console.log(req.file)
  res.send(req.user);
});

// Error handling middleware for unhandled errors.
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send("Something Broke!");
});

// Start the server and listen on port 8080.
app.listen(8080, () => {
  console.log("Server is running on port 8080");
});
